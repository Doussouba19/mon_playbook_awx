---
- name: Initialiser les objets iTop à partir des faits système
  hosts: all
  gather_facts: yes
  vars:
    itop_url: "http://10.0.57.36/web/webservices/rest.php"
    itop_user: "rest_user"
    itop_password: "RestUser@123"

  tasks:
    - name: Déduire les infos système
      set_fact:
        brand_name: "{{ ansible_product_name.split()[0] | default('HP') }}"
        model_name: "{{ ansible_product_name | default('HP ProLiant') }}"
        os_family: "{{ ansible_os_family | default('Linux') }}"
        os_version: "{{ ansible_distribution_version | default('24.04') }}"

    ##########################
    # Brand
    ##########################
    - name: Créer la marque (Brand)
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >
            {{
              {
                "operation": "core/create",
                "class": "Brand",
                "comment": "Créé automatiquement",
                "fields": { "name": brand_name }
              } | to_json
            }}
      register: brand_creation
      failed_when: false

    - name: Récupérer la marque (Brand) si création a échoué
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >
            {{
              {
                "operation": "core/get",
                "class": "Brand",
                "key": "SELECT Brand WHERE name='{{ brand_name }}'",
                "version": "1.3"
              } | to_json
            }}
      when: brand_creation.json.code != 0
      register: brand_query

    - name: Définir brand_id complet (ex: Brand::54)
      set_fact:
        brand_id: >-
          {{
            "Brand::" ~ (
              (brand_creation.json.objects | default({})).keys() | list | first
              if brand_creation.json is defined and brand_creation.json.code == 0 and (brand_creation.json.objects | length > 0)
              else
              (brand_query.json.objects | default({})).keys() | list | first
            )
          }}
      when:
        - (brand_creation.json.objects is defined and (brand_creation.json.objects | length > 0)) or
          (brand_query.json.objects is defined and (brand_query.json.objects | length > 0))

    - name: Échec si aucun brand_id trouvé
      fail:
        msg: "Impossible de déterminer le brand_id."
      when: brand_id is not defined

    ##########################
    # Model
    ##########################
    - name: Créer le modèle (Model)
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >
            {{
              {
                "operation": "core/create",
                "class": "Model",
                "comment": "Créé automatiquement",
                "fields": {
                  "name": model_name,
                  "brand_id": brand_id
                }
              } | to_json
            }}
      register: model_creation
      failed_when: false

    - name: Récupérer le modèle (Model) si création a échoué
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >
            {{
              {
                "operation": "core/get",
                "class": "Model",
                "key": "SELECT Model WHERE name='{{ model_name }}'",
                "version": "1.3"
              } | to_json
            }}
      when: model_creation.json.code != 0
      register: model_query

    - name: Définir model_id complet
      set_fact:
        model_id: >-
          {{
            "Model::" ~ (
              (model_creation.json.objects | default({})).keys() | list | first
              if model_creation.json is defined and model_creation.json.code == 0 and (model_creation.json.objects | length > 0)
              else
              (model_query.json.objects | default({})).keys() | list | first
            )
          }}
      when:
        - (model_creation.json.objects is defined and (model_creation.json.objects | length > 0)) or
          (model_query.json.objects is defined and (model_query.json.objects | length > 0))

    - name: Échec si aucun model_id trouvé
      fail:
        msg: "Impossible de déterminer le model_id."
      when: model_id is not defined

    ##########################
    # OSFamily
    ##########################
    - name: Créer la famille OS (OSFamily)
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >
            {{
              {
                "operation": "core/create",
                "class": "OSFamily",
                "comment": "Créé automatiquement",
                "fields": { "name": os_family }
              } | to_json
            }}
      register: osfamily_creation
      failed_when: false

    - name: Récupérer OSFamily si création a échoué
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >
            {{
              {
                "operation": "core/get",
                "class": "OSFamily",
                "key": "SELECT OSFamily WHERE name='{{ os_family }}'",
                "version": "1.3"
              } | to_json
            }}
      when: osfamily_creation.json.code != 0
      register: osfamily_query

    - name: Définir osfamily_id complet
      set_fact:
        osfamily_id: >-
          {{
            "OSFamily::" ~ (
              (osfamily_creation.json.objects | default({})).keys() | list | first
              if osfamily_creation.json is defined and osfamily_creation.json.code == 0 and (osfamily_creation.json.objects | length > 0)
              else
              (osfamily_query.json.objects | default({})).keys() | list | first
            )
          }}
      when:
        - (osfamily_creation.json.objects is defined and (osfamily_creation.json.objects | length > 0)) or
          (osfamily_query.json.objects is defined and (osfamily_query.json.objects | length > 0))

    - name: Échec si aucun osfamily_id trouvé
      fail:
        msg: "Impossible de déterminer le osfamily_id."
      when: osfamily_id is not defined

    ##########################
    # OSVersion
    ##########################
    - name: Créer la version OS (OSVersion)
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >
            {{
              {
                "operation": "core/create",
                "class": "OSVersion",
                "comment": "Créé automatiquement",
                "fields": {
                  "name": os_version,
                  "osfamily_id": osfamily_id
                }
              } | to_json
            }}
      register: osversion_creation
      failed_when: false

    - name: Récupérer OSVersion si création a échoué
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >
            {{
              {
                "operation": "core/get",
                "class": "OSVersion",
                "key": "SELECT OSVersion WHERE name='{{ os_version }}'",
                "version": "1.3"
              } | to_json
            }}
      when: osversion_creation.json.code != 0
      register: osversion_query

    - name: Définir osversion_id complet
      set_fact:
        osversion_id: >-
          {{
            "OSVersion::" ~ (
              (osversion_creation.json.objects | default({})).keys() | list | first
              if osversion_creation.json is defined and osversion_creation.json.code == 0 and (osversion_creation.json.objects | length > 0)
              else
              (osversion_query.json.objects | default({})).keys() | list | first
            )
          }}
      when:
        - (osversion_creation.json.objects is defined and (osversion_creation.json.objects | length > 0)) or
          (osversion_query.json.objects is defined and (osversion_query.json.objects | length > 0))

    - name: Échec si aucun osversion_id trouvé
      fail:
        msg: "Impossible de déterminer le osversion_id."
      when: osversion_id is not defined

    ##########################
    # Résumé final
    ##########################
    - name: Afficher les résultats
      debug:
        msg:
          - "brand_id = {{ brand_id }}"
          - "model_id = {{ model_id }}"
          - "osfamily_id = {{ osfamily_id }}"
          - "osversion_id = {{ osversion_id }}"
