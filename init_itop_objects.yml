---
- name: Initialiser les objets iTop à partir des faits système
  hosts: all
  gather_facts: yes
  vars:
    itop_url: "http://10.0.57.36/web/webservices/rest.php"
    itop_user: "rest_user"
    itop_password: "RestUser@123"
    api_version: "1.3"

  tasks:
    - name: Déduire les infos système
      set_fact:
        brand_name: "{{ ansible_product_name.split()[0] | default('HP') }}"
        model_name: "{{ ansible_product_name | default('HP ProLiant') }}"
        os_family: "{{ ansible_os_family | default('Linux') }}"
        os_version: "{{ ansible_distribution_version | default('24.04') }}"

    ########## Brand ##########
    - name: Créer la marque (Brand)
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >-
            {{
              {
                "version": api_version,
                "operation": "core/create",
                "class": "Brand",
                "comment": "Créé automatiquement",
                "fields": { "name": brand_name }
              } | to_json
            }}
      register: brand_creation
      failed_when: false

    - name: Récupérer la marque (Brand) si création échouée
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >-
            {{
              {
                "version": api_version,
                "operation": "core/get",
                "class": "Brand",
                "key": "SELECT Brand WHERE name='{{ brand_name }}'"
              } | to_json
            }}
      when: brand_creation.json.code != 0
      register: brand_query

    - name: Définir brand_id depuis récupération
      set_fact:
        brand_id: "Brand::{{ (brand_query.json.objects | dict2items)[0].key }}"
      when:
        - brand_id is not defined
        - brand_query.json.objects is defined
        - brand_query.json.objects | default({}) | length > 0

    ########## Model ##########
    - name: Créer le modèle (Model)
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >-
            {{
              {
                "version": api_version,
                "operation": "core/create",
                "class": "Model",
                "comment": "Créé automatiquement",
                "fields": {
                  "name": model_name,
                  "brand_id": brand_id
                }
              } | to_json
            }}
      register: model_creation
      failed_when: false

    - name: Récupérer le modèle (Model) si création échouée
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >-
            {{
              {
                "version": api_version,
                "operation": "core/get",
                "class": "Model",
                "key": "SELECT Model WHERE name='{{ model_name }}'"
              } | to_json
            }}
      when: model_creation.json.code != 0
      register: model_query

    - name: Définir model_id depuis récupération
      set_fact:
        model_id: "Model::{{ (model_query.json.objects | dict2items)[0].key }}"
      when:
        - model_id is not defined
        - model_query.json.objects is defined
        - model_query.json.objects | default({}) | length > 0

    ########## OSFamily ##########
    - name: Créer OSFamily
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >-
            {{
              {
                "version": api_version,
                "operation": "core/create",
                "class": "OSFamily",
                "comment": "Créé automatiquement",
                "fields": { "name": os_family }
              } | to_json
            }}
      register: osfamily_creation
      failed_when: false

    - name: Récupérer OSFamily si création échouée
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >-
            {{
              {
                "version": api_version,
                "operation": "core/get",
                "class": "OSFamily",
                "key": "SELECT OSFamily WHERE name='{{ os_family }}'"
              } | to_json
            }}
      when: osfamily_creation.json.code != 0
      register: osfamily_query

    - name: Définir osfamily_id depuis récupération
      set_fact:
        osfamily_id: "OSFamily::{{ (osfamily_query.json.objects | dict2items)[0].key }}"
      when:
        - osfamily_id is not defined
        - osfamily_query.json.objects is defined
        - osfamily_query.json.objects | default({}) | length > 0

    ########## OSVersion ##########
    - name: Créer OSVersion
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >-
            {{
              {
                "version": api_version,
                "operation": "core/create",
                "class": "OSVersion",
                "comment": "Créé automatiquement",
                "fields": {
                  "name": os_version,
                  "osfamily_id": osfamily_id
                }
              } | to_json
            }}
      register: osversion_creation
      failed_when: false

    - name: Récupérer OSVersion si création échouée
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >-
            {{
              {
                "version": api_version,
                "operation": "core/get",
                "class": "OSVersion",
                "key": "SELECT OSVersion WHERE name='{{ os_version }}'"
              } | to_json
            }}
      when: osversion_creation.json.code != 0
      register: osversion_query

    - name: Définir osversion_id depuis récupération
      set_fact:
        osversion_id: "OSVersion::{{ (osversion_query.json.objects | dict2items)[0].key }}"
      when:
        - osversion_id is not defined
        - osversion_query.json.objects is defined
        - osversion_query.json.objects | default({}) | length > 0

    ########## Debug ##########
    - name: Afficher les résultats
      debug:
        msg:
          - "brand_id: {{ brand_id }}"
          - "model_id: {{ model_id }}"
          - "osfamily_id: {{ osfamily_id }}"
          - "osversion_id: {{ osversion_id }}"
