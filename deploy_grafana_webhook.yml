---
- name: D√©ployer un endpoint webhook Grafana vers iTop avec gestion firing/resolved
  hosts: itop
  become: yes
  vars:
    itop_webhook_path: "/var/www/html/web/grafana_webhook1.php"
    itop_api_url: "http://10.0.57.36/web/webservices/rest.php?version=1.3"
    itop_login: "rest_user"
    itop_password: "RestUser@123"
    itop_org_id: "4"
    itop_caller_id: "1"

  tasks:
    - name: S'assurer que le r√©pertoire de destination existe
      file:
        path: "/var/www/html/web"
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: D√©ployer le script webhook PHP
      copy:
        dest: "{{ itop_webhook_path }}"
        owner: www-data
        group: www-data
        mode: '0644'
        content: |
          <?php
// Lire les donn√©es JSON envoy√©es par Grafana
$json = file_get_contents('php://input');
$data = json_decode($json, true);

// Sauvegarder le JSON re√ßu pour debug
file_put_contents('/tmp/grafana_input.json', $json);

// Variables de connexion √† l‚ÄôAPI iTop
$api_url = "http://10.0.57.36/web/webservices/rest.php?version=1.3";
$auth_user = "rest_user";
$auth_pwd = "RestUser@123";
$org_id = "4";
$caller_id = "1";

// Extraire les informations de l‚Äôalerte
$alert_status = $data['status'] ?? '';
$alert = $data['alerts'][0] ?? null;

if (!$alert) {
    http_response_code(400);
    echo json_encode(["status" => "error", "message" => "Alerte manquante"]);
    exit;
}

$alert_name = $alert['labels']['alertname'] ?? 'Unknown Alert';
$description = $alert['annotations']['description'] ?? 'Alerte sans description';
$instance = $alert['labels']['instance'] ?? 'unknown';
$severity = strtolower($alert['labels']['severity'] ?? 'warning');

// Titre unique pour cette alerte
$title = "Alerte Grafana : $alert_name ($instance)";
//$fingerprint = $alert['fingerprint'] ?? $alert_name . '-' . $instance;
//$title = "Alerte Grafana : $fingerprint";

// Mapper le severity vers impact/urgency/priority
$severity_map = [
    'critical' => ['1', '1', '1'], // √âlev√©
    'warning'  => ['2', '2', '2'], // Moyen
    'info'     => ['3', '3', '3'], // Faible
];
list($impact, $urgency, $priority) = $severity_map[$severity] ?? ['2', '2', '2'];

if ($alert_status === 'firing') {
    // V√©rifier si un ticket existe d√©j√†
    $search_data = json_encode([
        'operation' => 'core/get',
        'class' => 'UserRequest',
        'key' => "title = \"$title\" AND status != 'closed'"
    ]);

    $search_payload = [
        'auth_user' => $auth_user,
        'auth_pwd' => $auth_pwd,
        'json_data' => $search_data
    ];

    $context = stream_context_create([
        'http' => [
            'header' => "Content-type: application/x-www-form-urlencoded\r\n",
            'method' => 'POST',
            'content' => http_build_query($search_payload),
        ]
    ]);

    $search_result = file_get_contents($api_url, false, $context);
    file_put_contents('/tmp/grafana_search_firing.json', $search_result);

    $search_decoded = json_decode($search_result, true);

    // Cr√©er le ticket si aucun n'existe
    if (empty($search_decoded['objects'])) {
        $create_data = json_encode([
            'operation' => 'core/create',
            'class' => 'UserRequest',
            'comment' => 'Cr√©ation automatique depuis Grafana',
            'fields' => [
                'title' => $title,
                'description' => $description,
                'org_id' => $org_id,
                'caller_id' => $caller_id,
                'impact' => $impact,
                'urgency' => $urgency,
                'priority' => $priority,
                //'origin' => 'auto',
            ]
        ]);

        $create_payload = [
            'auth_user' => $auth_user,
            'auth_pwd' => $auth_pwd,
            'json_data' => $create_data
        ];

        $create_context = stream_context_create([
            'http' => [
                'header' => "Content-type: application/x-www-form-urlencoded\r\n",
                'method' => 'POST',
                'content' => http_build_query($create_payload),
            ]
        ]);

        $create_result = file_get_contents($api_url, false, $create_context);
        file_put_contents('/tmp/grafana_create_result.json', $create_result);

        echo json_encode([
            "status" => "success",
            "action" => "created",
            "itop_response" => json_decode($create_result, true)
        ]);

// üîÅ Lancement automatique du script Python apr√®s cr√©ation du ticket
        exec('nohup /home/itop-admin/itop-auto/venv/bin/python3 /home/itop-admin/itop-auto/poll_itop_and_trigger_semaphore.py > /tmp/poll_itop.log 2>&1 &');

        // üìù Log simple pour confirmer l‚Äôex√©cution
        file_put_contents('/tmp/grafana_php_trigger.log', "Script Python lanc√© √† " . date('Y-m-d H:i:s') . "\n", FILE_APPEND);
    } else {
        echo json_encode([
            "status" => "ignored",
            "message" => "Ticket d√©j√† existant pour cette alerte"
        ]);
    }

} elseif ($alert_status === 'resolved') {
    // Recherche exacte du ticket √† fermer
    $search_data = json_encode([
        'operation' => 'core/get',
        'class' => 'UserRequest',
        'key' => "title = \"$title\" AND status != 'closed'"
    ]);

    $search_payload = [
        'auth_user' => $auth_user,
        'auth_pwd' => $auth_pwd,
        'json_data' => $search_data
    ];

    $context = stream_context_create([
        'http' => [
            'header' => "Content-type: application/x-www-form-urlencoded\r\n",
            'method' => 'POST',
            'content' => http_build_query($search_payload),
        ]
    ]);

    $search_result = file_get_contents($api_url, false, $context);
    file_put_contents('/tmp/grafana_search_resolved.json', $search_result);

    $search_decoded = json_decode($search_result, true);
    if (!empty($search_decoded['objects'])) {
        $first = reset($search_decoded['objects']);
        $ticket_id = $first['fields']['id'];

        // Mise √† jour du ticket (fermeture)
        $update_data = json_encode([
            'operation' => 'core/update',
            'class' => 'UserRequest',
            'key' => $ticket_id,
            'fields' => [
                'status' => 'closed',
                'solution' => "Cl√¥ture automatique via Grafana"
            ]
        ]);

        $update_payload = [
            'auth_user' => $auth_user,
            'auth_pwd' => $auth_pwd,
            'json_data' => $update_data
        ];

        $update_context = stream_context_create([
            'http' => [
                'header' => "Content-type: application/x-www-form-urlencoded\r\n",
                'method' => 'POST',
                'content' => http_build_query($update_payload),
            ]
        ]);

        $update_result = file_get_contents($api_url, false, $update_context);
        file_put_contents('/tmp/grafana_update_result.json', $update_result);

        echo json_encode([
            "status" => "success",
            "action" => "closed",
            "itop_response" => json_decode($update_result, true)
        ]);
    } else {
        echo json_encode([
            "status" => "ignored",
            "message" => "Aucun ticket trouv√© pour cl√¥ture"
        ]);
    }
} else {
    echo json_encode([
        "status" => "ignored",
        "message" => "Statut non trait√©"
    ]);
}
?>

