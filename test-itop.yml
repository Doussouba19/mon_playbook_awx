- name: Enregistrer automatiquement les serveurs dans iTop via API REST
  hosts: all
  gather_facts: yes
  vars:
    itop_url: "http://10.0.57.36/web/webservices/rest.php"
    itop_user: "rest_user"
    itop_password: "RestUser@123"
    itop_version: "1.0"

  tasks:
    - name: Extraire infos serveur via facts - partie 1
      set_fact:
        server_ip: "{{ ansible_default_ipv4.address }}"
        os_family_name: "{{ ansible_facts['os_family'] | default('non défini') }}"
        os_version_name: "{{ ansible_facts['distribution'] | default('non défini') }} {{ ansible_facts['distribution_version'] | default('') }}"
        server_name: "{{ inventory_hostname }}"
        brand: "{{ ansible_facts['ansible_system_vendor'] | default('non défini') }}"
        model: "{{ ansible_facts['ansible_product_name'] | default('non défini') }}"
        serial_number: "{{ ansible_facts['ansible_serial_number'] | default('non défini') }}"
        production_date: "{{ ansible_date_time.date }}"
        purchase_date: "non défini"
        warranty_end_date: "{{ ansible_date_time.date }}"
        cpu: "{{ (ansible_facts['processor'][0] if ansible_facts['processor'] is defined else 'non défini') }}"
        ram: "{{ (ansible_facts['memtotal_mb'] | default(0)) | string }} MB"
        nb_unite: "non défini"
        power_supply: "non défini"
        power_source_a: "non défini"
        power_source_b: "non défini"
        redundancy: "Le Serveur est alimenté si au moins une source électrique (A ou B) est opérationnelle"
        organisation: "API Users"
        status: "Production"
        criticity: >-
          {% set cpu_load = 20 %}
          {% if cpu_load < 40 %}
            basse
          {% elif cpu_load < 70 %}
            moyen
          {% else %}
            critique
          {% endif %}

    - name: Extraire infos serveur via facts - partie 2 (asset_number)
      set_fact:
        asset_number: "{{ ansible_date_time.date }}-{{ brand | replace(' ', '') }}"

    - name: Déduire site en fonction IP
      set_fact:
        site_name: >-
          {% if server_ip.startswith('10.0.57.') %}
            Bamako
          {% else %}
            Inconnu
          {% endif %}

    # --- Fonction utilitaire pour extraction ID ---
    - name: Extraire ID depuis réponse JSON iTop
      vars:
        response: "{{ item.response }}"
      set_fact:
        "{{ item.fact_name }}": >-
          {{
            (response.json.objects | dict2items | first).value.id
            if (response.json.objects is defined and
                (response.json.objects | length) > 0)
            else ''
          }}
      loop:
        - { response: "{{ osfamily_search }}", fact_name: "osfamily_id" }
        - { response: "{{ osversion_search }}", fact_name: "osversion_id" }
        - { response: "{{ site_search }}", fact_name: "site_id" }
      loop_control:
        label: "{{ item.fact_name }}"

    # --- Recherche OSFamily ---
    - name: Chercher OSFamily dans iTop via filtre
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body:
          operation: core/get
          version: "{{ itop_version }}"
          class: OSFamily
          key: ""
          filters:
            name: "{{ os_family_name }}"
          output_fields: "id,name"
        body_format: json
        return_content: yes
      register: osfamily_search

    - name: Créer OSFamily si absent
      when: osfamily_id == ''
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body:
          operation: core/create
          version: "{{ itop_version }}"
          class: OSFamily
          comment: Créé automatiquement via Ansible
          fields:
            name: "{{ os_family_name }}"
        body_format: json
        return_content: yes
      register: osfamily_create

    - name: Set osfamily_id après création
      when: osfamily_id == ''
      set_fact:
        osfamily_id: >-
          {{
            (osfamily_create.json.objects | dict2items | first).value.id
            if (osfamily_create.json.objects is defined and
                (osfamily_create.json.objects | length) > 0)
            else ''
          }}

    # --- Recherche OSVersion ---
    - name: Chercher OSVersion dans iTop via filtre
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body:
          operation: core/get
          version: "{{ itop_version }}"
          class: OSVersion
          key: ""
          filters:
            name: "{{ os_version_name }}"
          output_fields: "id,name"
        body_format: json
        return_content: yes
      register: osversion_search

    - name: Créer OSVersion si absent
      when: osversion_id == ''
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body:
          operation: core/create
          version: "{{ itop_version }}"
          class: OSVersion
          comment: Créé automatiquement via Ansible
          fields:
            name: "{{ os_version_name }}"
            osfamily_id: "{{ osfamily_id }}"
        body_format: json
        return_content: yes
      register: osversion_create

    - name: Set osversion_id après création
      when: osversion_id == ''
      set_fact:
        osversion_id: >-
          {{
            (osversion_create.json.objects | dict2items | first).value.id
            if (osversion_create.json.objects is defined and
                (osversion_create.json.objects | length) > 0)
            else ''
          }}

    # --- Recherche Site (Location) ---
    - name: Chercher site dans iTop via filtre
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body:
          operation: core/get
          version: "{{ itop_version }}"
          class: Location
          key: ""
          filters:
            name: "{{ site_name }}"
          output_fields: "id,name"
        body_format: json
        return_content: yes
      register: site_search

    - name: Créer site si absent
      when: site_id == ''
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body:
          operation: core/create
          version: "{{ itop_version }}"
          class: Location
          comment: Créé automatiquement via Ansible
          fields:
            name: "{{ site_name }}"
        body_format: json
        return_content: yes
      register: site_create

    - name: Set site_id après création
      when: site_id == ''
      set_fact:
        site_id: >-
          {{
            (site_create.json.objects | dict2items | first).value.id
            if (site_create.json.objects is defined and
                (site_create.json.objects | length) > 0)
            else ''
          }}

    # --- Création serveur ---
    - name: Créer le serveur dans iTop
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body:
          operation: core/create
          version: "{{ itop_version }}"
          class: Server
          comment: Créé automatiquement via Ansible
          fields:
            name: "{{ server_name }}"
            organisation: "{{ organisation }}"
            status: "{{ status }}"
            criticity: "{{ criticity }}"
            location_id: "{{ site_id }}"
            rack: "non défini"
            chassis: "non défini"
            brand: "{{ brand }}"
            model: "{{ model }}"
            osfamily_id: "{{ osfamily_id }}"
            osversion_id: "{{ osversion_id }}"
            ip: "{{ server_ip }}"
            oslicense: "non défini"
            cpu: "{{ cpu }}"
            ram: "{{ ram }}"
            nbunite: "{{ nb_unite }}"
            serialnumber: "{{ serial_number }}"
            assetnumber: "{{ asset_number }}"
            production_date: "{{ production_date }}"
            purchase_date: "{{ purchase_date }}"
            warranty_end_date: "{{ warranty_end_date }}"
            powersupply: "{{ power_supply }}"
            powersourcea: "{{ power_source_a }}"
            powersourceb: "{{ power_source_b }}"
            redundancy: "{{ redundancy }}"
            description: "{{ server_name }} - {{ site_name }}"
        body_format: json
        return_content: yes
      register: server_create

    - name: Extraire ID serveur créé
      set_fact:
        created_server_id: >-
          {{
            (server_create.json.objects | dict2items | first).value.id
            if (server_create.json.objects is defined and
                (server_create.json.objects | length) > 0)
            else ''
          }}

    - name: Afficher confirmation création serveur
      debug:
        msg: >-
          {% if created_server_id != '' %}
            Serveur {{ server_name }} créé dans iTop avec ID {{ created_server_id }}
          {% else %}
            Serveur {{ server_name }} créé dans iTop mais ID non trouvé.
            Réponse complète : {{ server_create.json }}
          {% endif %}
