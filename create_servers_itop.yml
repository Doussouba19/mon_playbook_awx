---
- name: Création serveur iTop avec collecte auto des infos
  hosts: all
  gather_facts: yes
  vars:
    itop_url: "http://10.0.57.36/web/webservices/rest.php"
    itop_user: "admin"
    itop_password: "admin"
    default_org_id: "API Users"
    default_location_id: "Bamako"
    default_rack_id: "Rack1"
    move2production: "2024-06-01"
    purchase_date: "2024-05-01"
    end_of_warranty: "2027-05-01"

  tasks:
    - name: Récupérer la marque du serveur
      set_fact:
        brand_name: "{{ ansible_product_name.split()[0] }}"

    - name: Récupérer le modèle du serveur
      set_fact:
        model_name: "{{ ansible_product_name }}"

    - name: Définir les variables dynamiques
      set_fact:
        os_family: "{{ ansible_os_family }}"
        os_version: "{{ ansible_distribution_version }}"

    - name: Obtenir l'ID de la marque dans iTop
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >
            {{ {
              "operation": "core/get",
              "class": "Brand",
              "key": "name LIKE '%" + brand_name + "%'"
            } | to_json }}
      register: brand_response

    - name: Extraire brand_id
      set_fact:
        brand_id: "{{ (brand_response.json.objects | dict2items)[0].value.key }}"
      when: brand_response.json.objects is defined and (brand_response.json.objects | length > 0)

    - name: Obtenir l'ID du modèle dans iTop
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >
            {{ {
              "operation": "core/get",
              "class": "Model",
              "key": "name LIKE '%" + model_name + "%'"
            } | to_json }}
      register: model_response

    - name: Extraire model_id
      set_fact:
        model_id: "{{ (model_response.json.objects | dict2items)[0].value.key }}"
      when: model_response.json.objects is defined and (model_response.json.objects | length > 0)

    - name: Obtenir l'ID de la famille OS dans iTop
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >
            {{ {
              "operation": "core/get",
              "class": "OSFamily",
              "key": "name LIKE '%" + os_family + "%'"
            } | to_json }}
      register: osfamily_response

    - name: Extraire osfamily_id
      set_fact:
        osfamily_id: "{{ (osfamily_response.json.objects | dict2items)[0].value.key }}"
      when: osfamily_response.json.objects is defined and (osfamily_response.json.objects | length > 0)

    - name: Obtenir l'ID de la version OS dans iTop
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >
            {{ {
              "operation": "core/get",
              "class": "OSVersion",
              "key": "name LIKE '%" + os_version + "%'"
            } | to_json }}
      register: osversion_response

    - name: Extraire osversion_id
      set_fact:
        osversion_id: "{{ (osversion_response.json.objects | dict2items)[0].value.key }}"
      when: osversion_response.json.objects is defined and (osversion_response.json.objects | length > 0)

    - name: Vérifier que tous les IDs existent
      fail:
        msg: "L'un des objets (marque, modèle, OS) est introuvable dans iTop."
      when:
        - brand_id is not defined
        - model_id is not defined
        - osfamily_id is not defined
        - osversion_id is not defined

    - name: Envoi du serveur dans iTop
      uri:
        url: "{{ itop_url }}"
        method: POST
        user: "{{ itop_user }}"
        password: "{{ itop_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          json_data: >-
            {{
              {
                "version": "1.3",
                "operation": "core/create",
                "class": "Server",
                "comment": "Créé automatiquement depuis Ansible",
                "fields": {
                  "name": inventory_hostname,
                  "org_id": default_org_id,
                  "status": "production",
                  "business_criticity": "low",
                  "location_id": default_location_id,
                  "rack_id": default_rack_id,
                  "brand_id": brand_id,
                  "model_id": model_id,
                  "osfamily_id": osfamily_id,
                  "osversion_id": osversion_id,
                  "cpu": ansible_processor[1] | default('Unknown'),
                  "ram": ansible_memtotal_mb | default('0'),
                  "nb_u": "2",
                  "serialnumber": "SRV-" + ansible_default_ipv4.address,
                  "asset_number": "AST-" + ansible_default_ipv4.address,
                  "move2production": move2production,
                  "purchase_date": purchase_date,
                  "end_of_warranty": end_of_warranty,
                  "description": "Créé automatiquement depuis Ansible avec détection auto des infos"
                }
              } | to_json
            }}
      register: create_response

    - name: Afficher la réponse de création
      debug:
        var: create_response.json
